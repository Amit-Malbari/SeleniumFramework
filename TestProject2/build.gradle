import java.util.concurrent.Flow.Publisher

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/6.8.3/samples
 */
plugins {
	id "application"
	id 'maven-publish'
}
ext {
	javaMainClass = "com.TestExecute.launcher.MainLauncher"
}

application {
	mainClassName = javaMainClass
}
group = 'amit'
version = 3
sourceCompatibility=15
targetCompatibility=15

sourceSets {
	main {
		java {
			srcDirs = ["src"]
			exclude 'com/TestData/**'
		}
	}
}

repositories {
   jcenter()
   maven { url "https://repo.maven.apache.org/maven2" }
   maven { url "https://central.maven.org/maven2/" }
}


dependencies{
	
	compile group: 'org.testng', name: 'testng', version:'6.14.3'
	compile group: 'org.seleniumhq.selenium', name: 'selenium-support', version: '3.141.59'
	compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'
	compile group: 'org.seleniumhq.selenium', name: 'selenium-firefox-driver', version: '3.141.59'
	compile group: 'org.seleniumhq.selenium', name: 'selenium-api', version: '3.141.59'
	compile group: 'org.seleniumhq.selenium', name: 'selenium-chrome-driver', version: '3.141.59'
	compile group: 'org.seleniumhq.selenium', name: 'selenium-remote-driver', version: '3.141.59'
	compile group: 'org.seleniumhq.selenium', name: 'selenium-edge-driver', version: '3.141.59'
	compile group: 'org.apache.poi', name: 'poi', version:'3.16'
	implementation group: 'org.apache.poi', name: 'poi', version: '3.17'
	implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '3.16'
	compile group: 'javax.xml.ws', name: 'jaxws-api', version: '2.3.1'
	compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
	compile group: 'com.sun.activation', name: 'jakarta.activation', version: '2.0.0'
	compile group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
	compile group: 'javax.mail', name: 'mail', version:'1.5.0-b01'
}


// zipping Test Data

task copyBVTTestData(type: Zip) {
	println "Creating BVT zip"
	archiveFileName = "BVT.zip"
	destinationDirectory = file("$buildDir/dist/")
	from ("src/com/TestData/BVT/")
}

task copySearchTestData(type: Zip) {
	println "Creating Search zip"
	archiveFileName = "Search.zip"
	destinationDirectory = file("$buildDir/dist/")
	from ("src/com/TestData/Search/")
}

task copyWorkFlowTestData(type: Zip) {
	println "Creating Workflow zip"
	archiveFileName = "WorkFlow.zip"
	destinationDirectory = file("$buildDir/dist/")
	from ("src/com/TestData/WorkFlow/")
}




// copying all the Config,Lib, Tetng to 1 location which will be used for zipping. The abce one are zipped seperatedly beacuse only those zip will be downloaded which are required for runs
// but this case this will be required by all

task copyConfig(type:Copy){
	println "Copying Config"
	from("./Config") {
		include "**/*"
	}
   into "$buildDir/misc/Config"
}

task copyLib(type:Copy){
	println "Copying Lib"
	from("./Lib") {
		include "**/*"
	}
   into "$buildDir/misc/Lib"
}

task copyMailTemplates(type:Copy){
	println "Copying Mail Templates"
	from("./MailTemplates") {
		include "**/*"
	}
   into "$buildDir/misc/MailTemplates"
}




task copyTestNG(type:Copy){
	println "Copying TestNG"
	from("./TestNG") {
		include "**/*"
	}
   into "$buildDir/misc/TestNG"
}

// now will zip ablove copied files

task zipMisc(type: Zip, dependsOn : ['copyConfig','copyLib','copyMailTemplates','copyTestNG']) {
   println "Creating zipMisc zip"
   archiveFileName = "misc.zip"
   destinationDirectory = file("$buildDir/dist/")
   from ("$buildDir/misc")
}


task copyTestData(dependsOn:['copyBVTTestData','copySearchTestData','copyWorkFlowTestData','zipMisc']){

}

def env = project.hasProperty('env')? env:'nightly';
def artifactSuffix = (env.equals('nightly') ? '-night' : "-${env}");
def version=2

publishing {
	publications {
	   maven(MavenPublication) {
			artifact("$buildDir/libs/${project.name}.jar") {
				artifactId = "orangeHRM${artifactSuffix}"
				
			}
			artifact("$buildDir/dist/BVT.zip"){
				classifier='BVT'
				artifactId = "orangeHRM${artifactSuffix}"
			}
			artifact("$buildDir/dist/Search.zip"){
				classifier='Search'
				artifactId = "orangeHRM${artifactSuffix}"
			}
			artifact("$buildDir/dist/WorkFlow.zip"){
				classifier='WorkFlow'
				artifactId = "orangeHRM${artifactSuffix}"
			}
			artifact("$buildDir/dist/misc.zip"){
				artifactId = "orangeHRM${artifactSuffix}"
				classifier='misc'
			}
		}
	}
	repositories {
		maven {
			url = "http://localhost:8081/repository/maven-releases/"
			credentials {
			username = 'admin'
			password = 'admin123'
			}
		}
	}
}

task finalBuild(dependsOn:['jar','publish'] ) {
	
}


//  Test cAse execution
// unzipping the zip conatining all the jar files, dependency jars
task unzip(dependsOn : 'assemble', type : Copy) {
	def destDir = "${project.buildDir}\\libs";
	from zipTree("${project.buildDir}\\distributions\\${project.name}.zip")
	into destDir
}

def projectCp = "${project.name}.jar"
task execute(dependsOn : 'unzip' ,type:JavaExec) {
	def configLocation = project.hasProperty('configFile')? configFile:'hataf.properties';
	def testngLocation = project.hasProperty('testngFile')? testngFile:'TestNG.xml';
	def summaryFlag = project.hasProperty('summaryFlag') ? summaryFlag : 1;
	def module = project.hasProperty('area')? area:'BVT';
	def runUrl = project.hasProperty('url')? url:'https://nightly.planfuldev.com/';
	main = 'com.TestExecute.launcher.MainLauncher'
	args(["--config",configLocation ,"--testngXml" ,testngLocation, "--summaryFlag", summaryFlag, "--area", module, "--url", runUrl])
	classpath = files(
		"${project.buildDir}\\libs\\${projectCp}",
		"${project.buildDir}\\libs\\${project.name}\\lib\\*",
		project.sourceSets.main.output,
	)
}

publish.dependsOn copyTestData 